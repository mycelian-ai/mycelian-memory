---
description: 
globs: 
alwaysApply: true
---
---
description: Detailed specification for Memory Bank structure and protocols
alwaysApply: true
---

# Cursor's Memory Bank (Performance Optimized)

_Revised for high-fidelity / zero-fluff._

‚Ä¢ The agent resets between conversations; the Memory Bank is its only persistent context.
‚Ä¢ Always start by reading `activeContext.md` (‚â§150 lines) then other files on demand.

## Formatting Principles
- Use **H1** for the file title, **H2** for major sections. Avoid deeper levels.
- Keep sentences concise; prefer bullet lists or tables.
- Status icons: ‚úÖ accepted, ‚è≥ in-progress, ‚ùå superseded. No decorative emojis.
- Flat bullet nesting (‚â§2 levels). Replace deep nesting with tables.

## Memory Bank Structure

The Memory Bank consists of core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy with **visual diagrams** for immediate orientation and **strict size limits** for fast recovery:

### Core File Hierarchy (With Performance Limits)
```mermaid
flowchart TD
    %% Core File Structure with Size Limits
    PB[projectbrief.md<br/>< 300 lines] --> PC[productContext.md<br/>< 250 lines]
    PB --> SP[systemPatterns.md<br/>< 250 lines]
    PB --> TC[techContext.md<br/>< 200 lines]

    PC --> AC[activeContext.md<br/>CENTRAL HUB<br/>< 150 lines]
    SP --> AC
    TC --> AC

    AC --> P[progress.md<br/>< 100 lines]

    %% Optional Context Files with limits
    subgraph "Optional Context Files (size-limited)"
        direction LR
        OCF1[decisionLog.md<br/>< 150 lines]
        OCF2[commands.md<br/>< 200 lines]
        OCF_etc[feature_X_details.md<br/>< 150 lines]
    end

    %% Archive Structure
    subgraph "Archive (unlimited)"
        direction LR
        ARCH1[completed-phases/]
        ARCH2[detailed-context/]
    end

    %% Core files can be supplemented by optional context files
    AC -. "references/details in" .-> OCF1
    AC -. "references/details in" .-> OCF2
    AC -. "archived details in" .-> ARCH1
    AC -. "archived details in" .-> ARCH2

    style AC fill:#e1f5fe,stroke:#01579b,stroke-width:3px,color:#000
    style P fill:#ff6b6b,stroke:#d63031,stroke-width:2px,color:#fff
    style OCF1 fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000
    style ARCH1 fill:#f8f8f8,stroke:#999,stroke-width:1px,color:#666
```

### Core Files (Required - With Size Limits)

#### **üî• High Frequency (Read First)**
1. `activeContext.md` ‚≠ê **CENTRAL HUB** (< 150 lines)
   - **PRIMARY ENTRY POINT after memory reset**
   - Current work focus and active implementation progress
   - Visual navigation diagram showing current status
   - Cross-references to detailed context when needed
   - **ARCHIVE COMPLETED WORK IMMEDIATELY**

2. `progress.md` (< 100 lines)
   - Current phase and active steps only
   - What's left to build in current phase
   - **Archive completed phases to archive/completed-phases/**

#### **‚ö° Medium Frequency (Task-Dependent)**
3. `systemPatterns.md` (< 250 lines)
   - Key patterns currently in use
   - Essential architecture diagrams
   - Current technical decisions
   - **Archive detailed implementation patterns**

4. `techContext.md` (< 200 lines)
   - Current technologies in use
   - Active development setup
   - Current technical constraints
   - **Archive obsolete setup information**

5. `decisionLog.md` (< 150 lines)
   - Recent architectural decisions with rationale
   - **Archive old decisions when superseded**

#### **üìö Low Frequency (Reference)**
6. `projectbrief.md` (< 300 lines)
   - Foundation document and project scope
   - Core requirements and goals

7. `productContext.md` (< 250 lines)
   - Product vision and user experience goals
   - Problems solved and how it works

### Archive Strategy (Mandatory)
```
memory-bank/
‚îî‚îÄ‚îÄ archive/
    ‚îú‚îÄ‚îÄ completed-phases/     # Phase 1, 2, 3, etc. details
    ‚îî‚îÄ‚îÄ detailed-context/     # Full implementation history
```

**Archive immediately when:**
- Phases/features are completed
- Files approach size limits
- Implementation details become historical

## Performance Requirements

### **Recovery Time Targets**
- **Primary Recovery**: < 15 seconds (activeContext.md only)
- **Full Context**: < 30 seconds (all active files)
- **Total Active Reading**: < 600 lines maximum

### **Optimization Checkpoints**
- **Start**: Verify activeContext.md has current state
- **End**: Update current status, archive completed work
- **Periodic**: Validate cross-references, enforce size limits

## Visual Diagram Requirements

**All Memory Bank files should include visual diagrams when helpful:**
- **Mermaid diagrams** for architecture, workflows, and relationships
- **Status indicators** (‚úÖ ‚è≥ ‚ùå) for progress tracking
- **Cross-reference arrows** showing file relationships
- **Archive references** clearly indicated

**Key Visual Elements:**
- `activeContext.md` MUST contain a navigation diagram showing current status
- `systemPatterns.md` MUST contain essential architecture diagrams
- **Current implementation progress** should be visually tracked
- File relationships should be diagrammatically clear

## Core Workflows

### Ask Mode (User Questions & Information Requests)
```mermaid
flowchart TD
    Start[User Question] --> ReadActive[Read activeContext.md<br/>< 150 lines]
    ReadActive --> CheckContext{Need More Context?}

    CheckContext -->|No| Answer[Provide Answer]
    CheckContext -->|Yes| ReadSpecific[Read Specific Files<br/>Task-dependent]
    ReadSpecific --> Answer
    Answer --> Update[Update Memory Bank if needed]
```

### Agent Mode (Task Execution & Implementation)
```mermaid
flowchart TD
    Start[Task Assignment] --> Context[Check activeContext.md<br/>+ visual diagram]
    Context --> Execute[Execute Task]
    Execute --> Archive[Archive Completed Work]
    Archive --> Update[Update Current Status]
    Update --> Document[Document Changes & Next Steps]
```

## Fast Recovery Protocol

**After each memory reset, follow this sequence:**
1. **Read `activeContext.md` ONLY** (< 150 lines, < 15 seconds)
2. **Review the visual diagram** - understand current position immediately
3. **Verify current work status** - what's active vs. next steps
4. **Follow cross-references** - read additional files ONLY if task requires
5. **Lazy load archives** - access detailed information only when needed

## Documentation Updates

Memory Bank updates occur when:
1. After implementing significant changes
2. When user requests **update memory bank** (focus on active files)
3. When files approach size limits (archive immediately)
4. When context needs clarification

### Update Protocol (UMB)
When triggered by **update memory bank**:
1. **Review ACTIVE files only** (not archived files)
2. **Archive completed work** that's cluttering active files
3. **Enforce size limits** - move excess detail to archives
4. **Update visual diagrams** to reflect current status only
5. **Verify cross-references** between active and archived content

**Priority**: activeContext.md and progress.md are most critical for recovery.

**The visual diagrams are CRITICAL for fast recovery after memory resets.**
REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision, clarity, and **performance** as my effectiveness depends entirely on its accuracy and speed of access.

---
description: 
globs: 
alwaysApply: true
---
---
description: Development workflow for Go codebase
alwaysApply: true
---

# Development Workflow (Go)

1. **Plan → Act**  
   • Start each task with a short bullet-list plan of tool actions.  
   • Execute immediately unless required input is missing.

2. **Incremental delivery**  
   • Work on **one** small feature per branch / commit.  
   • Fix root causes, not symptoms — no duct-tape hacks.  
   • Delete superseded code (e.g. legacy packages) in the same PR once migration is validated.

3. **Local checks before you conside a change being complete**  
   • `go fmt ./... && go vet ./... && go test -race ./... && go mod tidy && go build ./... && go tool golangci-lint run`


4. **Commit scope & staging**  
   • Before every commit, run `git status` to review all local changes.  
   • Classify changes and ask user which changes to commit
   • Stage **all** modified, deleted, and untracked files (`git add -A`) unless explicitly instructed to exclude something.  
   • If any change looks unclear, ask for guidance **before** committing.

5. **Error-handling cadence**  
   • After **two consecutive** build/test failures, pause, summarise the issue, and ask for guidance.

6. **Security & privacy**  
   • Redact credentials or tokens in logs and chat output.  
   • Never print full stack traces; provide high-level error summaries.

7. **Defense-in-Depth & Shift-Left Safety**  
   **Risk Classification** – maintain a living heat-map:  
   • **Critical**: HTTP handlers, transaction logic, cursor math.  
   • **Low**: CLI parsing, logging, documentation.  
   **Pull-Request Requirements**  
   • Every PR that touches **Critical** code is treated as a mini-audit.  
   • Author must include a short **Risk Paragraph**: "What can go wrong? How is it prevented?"  
   • Mandatory pair-programming review & two-person approval for Critical changes.  
   • Property-based or fuzz tests added for new Critical logic.  
   **Automated Gates** (CI):  
   • `staticcheck ./...`  
   • `gosec ./...`  
   • `govulncheck ./...`  
   Pipeline fails fast if any gate is non-zero.

8. YOU MUST RUN `source venv/bin/activate && export PATH="$(go env GOBIN 2>/dev/null || go env GOPATH)/bin:$PATH"` to setup python env before running any python code in the terminal.